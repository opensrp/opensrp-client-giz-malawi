buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidToolsBuildGradle"
        classpath "gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:$coverallsVersion"
        classpath 'io.fabric.tools:gradle:1.30.0'
        classpath 'com.google.gms:google-services:4.3.10'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'io.fabric'
apply plugin: 'org.smartregister.gradle.jarjar'
apply plugin: 'com.google.gms.google-services'


jacoco {
    toolVersion = jacocoVersion
}

Properties properties = new Properties()
if (project.rootProject.file("local.properties").exists()) {
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
} else{
    project.logger.error("local.properties file does not exist")
}

ext.getLocalProperty = { key ->
    if (properties != null && properties.containsKey(key)) {
        return properties[key]
    } else {
        project.logger.error(key + " could not be found. Setting it to an empty string")
        return "\"\""
    }
}


ext.checkKeys = { keys ->
    keys.each { key ->
        if (properties == null || !properties.containsKey(key)) {
            project.logger.error(key + " is missing from the local.properties")
        }
    }
}

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        applicationId "org.smartregister.giz"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 49
        versionName "0.4.9"
        multiDexEnabled true
        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        buildConfigField "String", "SYNC_TYPE", '"teamId"'
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "IS_SYNC_SETTINGS", "true"
        buildConfigField "long", "EVENT_VERSION", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "RESOLVE_SETTINGS", "false"
        buildConfigField "boolean", "HAS_EXTRA_SETTINGS_SYNC_FILTER", "true"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        checkKeys(["oauth.client.id.production", "oauth.client.secret.production", "oauth.client.id.stage", "oauth.client.secret.stage", "oauth.client.id.preview", "oauth.client.secret.preview"])

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = [eventBusIndex: 'org.smartregister.giz.GizMalawiEventBusIndex']

            }
        }
        vectorDrawables.useSupportLibrary = true
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    buildTypes {

        release {
            minifyEnabled false
            zipAlignEnabled true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rule.pro'
            resValue "string", 'opensrp_url', '"https://opensrp.health.gov.mw/opensrp/"'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "VACCINE_SYNC_TIME", '0'
            buildConfigField "int", "DATABASE_VERSION", '20'
            buildConfigField "int", "URL_VERSION", '1'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
            buildConfigField "int", "GROWTH_MONITORING_SYNC_TIME", '15'
            buildConfigField "String[]", "LOCATION_LEVELS", '{"Country", "Province", "District", "Facility", "Village"}'
            buildConfigField "String[]", "HEALTH_FACILITY_LEVELS", '{"Country", "Province", "District", "Health Facility", "Village"}'

            buildConfigField "String", "OAUTH_CLIENT_ID", getLocalProperty("oauth.client.id.production")
            buildConfigField "String", "OAUTH_CLIENT_SECRET", getLocalProperty("oauth.client.secret.production")

        }

        releaseDebug {
            minifyEnabled false
            zipAlignEnabled true

            versionNameSuffix "-internal-release"
            debuggable true
            signingConfig signingConfigs.debug

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rule.pro'
            resValue "string", 'opensrp_url', '"https://opensrp.health.gov.mw/opensrp/"'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '10'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '2'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "VACCINE_SYNC_TIME", '0'
            buildConfigField "int", "DATABASE_VERSION", '20'
            buildConfigField "int", "URL_VERSION", '1'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
            buildConfigField "int", "GROWTH_MONITORING_SYNC_TIME", '15'
            buildConfigField "String[]", "LOCATION_LEVELS", '{"Country", "Province", "District", "Facility", "Village"}'
            buildConfigField "String[]", "HEALTH_FACILITY_LEVELS", '{"Country", "Province", "District", "Health Facility", "Village"}'

            buildConfigField "String", "OAUTH_CLIENT_ID", getLocalProperty("oauth.client.id.production")
            buildConfigField "String", "OAUTH_CLIENT_SECRET", getLocalProperty("oauth.client.secret.production")
        }

        preview {
            versionNameSuffix "-beta"
            minifyEnabled false
            zipAlignEnabled true
            debuggable true
            signingConfig signingConfigs.debug

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rule.pro'
            resValue "string", 'opensrp_url', '"https://jembi-preview.smartregister.org/opensrp/"'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '10'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "VACCINE_SYNC_TIME", '0'
            buildConfigField "int", "DATABASE_VERSION", '20'
            buildConfigField "int", "URL_VERSION", '1'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
            buildConfigField "int", "GROWTH_MONITORING_SYNC_TIME", '15'
            buildConfigField "String[]", "LOCATION_LEVELS", '{"Country", "Province", "District", "Facility", "Village"}'
            buildConfigField "String[]", "HEALTH_FACILITY_LEVELS", '{"Country", "Province", "District", "Health Facility", "Village"}'

            buildConfigField "String", "OAUTH_CLIENT_ID", getLocalProperty("oauth.client.id.preview")
            buildConfigField "String", "OAUTH_CLIENT_SECRET", getLocalProperty("oauth.client.secret.preview")
        }

        debug {

            versionNameSuffix "-debug"

            resValue "string", 'opensrp_url', '"https://opensrp-jembi-eregister.smartregister.org/opensrp/"'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "VACCINE_SYNC_TIME", '0'
            buildConfigField "int", "DATABASE_VERSION", '20'
            buildConfigField "int", "URL_VERSION", '1'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '15'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '15'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '15'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
            buildConfigField "int", "GROWTH_MONITORING_SYNC_TIME", '15'
            buildConfigField "String[]", "LOCATION_LEVELS", '{"Country", "Province", "District", "Facility", "Village"}'
            buildConfigField "String[]", "HEALTH_FACILITY_LEVELS", '{"Country", "Province", "District", "Health Facility", "Village"}'
            testCoverageEnabled true

            buildConfigField "String", "OAUTH_CLIENT_ID", getLocalProperty("oauth.client.id.stage")
            buildConfigField "String", "OAUTH_CLIENT_SECRET", getLocalProperty("oauth.client.secret.stage")
        }
    }

    // https://stackoverflow.com/a/27119543/152938
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }

    testVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'hl7/fhir/core/package/StructureDefinition-de-CoverageEligibilityResponse.contained.json'
    }


    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
    dataBinding {
        enabled = true
    }
    configurations.all {
        exclude group: 'com.github.lecho', module: 'hellocharts-library'
        exclude group: 'com.evernote', module: 'android-job'

    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'

    jarJar 'com.ibm.fhir:fhir-model:4.7.0'
    jarJar 'com.ibm.fhir:fhir-path:4.7.0'

    implementation fileTree(dir: "./build/libs", include: ['*.jar'])

    implementation 'com.evrencoskun.library:tableview:0.8.8'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.15'
//    implementation(project(':opensrp-opd')) {
    implementation('org.smartregister:opensrp-client-opd:0.1.5-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'org.smartregister', module: 'opensrp-client-configurable-views'
        exclude group: 'com.android.support', module: 'appcompat-v7'
//        exclude group: 'com.github.lecho', module: 'hellocharts-library'
    }

    implementation('org.smartregister:opensrp-client-child:0.10.1-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'org.smartregister', module: 'opensrp-client-immunization'
        exclude group: 'org.smartregister', module: 'opensrp-client-configurable-views'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    api('org.smartregister:opensrp-client-anc:2.0.3.40-LOCAL-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'org.smartregister', module: 'opensrp-client-configurable-views'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    api('org.smartregister:opensrp-client-native-form:2.1.14.1-GIZ-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'org.yaml', module: 'snakeyaml'
        exclude group: 'io.ona.rdt-capture', module: 'lib'
    }

    api('org.smartregister:opensrp-client-core:5.0.9-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'com.github.bmelnychuk', module: 'atv'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'net.zetetic', module: 'android-database-sqlcipher'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.ibm.fhir', module: 'fhir-model'
        exclude group: 'com.ibm.fhir', module: 'fhir-path'
    }

    implementation('org.smartregister:opensrp-client-maternity:0.0.8-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    api('org.smartregister:opensrp-client-pnc:0.0.6-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    api('org.smartregister:opensrp-client-immunization:4.0.7-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    implementation('org.smartregister:opensrp-client-configurable-views:1.1.5-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
    }

    implementation('org.smartregister:opensrp-client-growth-monitoring:1.1.22-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    implementation('org.smartregister:opensrp-client-reporting:0.0.22-v4-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.github.lecho', module: 'hellocharts-library'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }


    implementation 'androidx.appcompat:appcompat:1.0.0'
    annotationProcessor 'com.jakewharton:butterknife:7.0.0'
    implementation 'net.zetetic:android-database-sqlcipher:4.1.3@aar'
    implementation 'commons-validator:commons-validator:1.6'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.greenrobot:eventbus:3.1.1'
    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.1.1'
    implementation 'com.google.guava:guava:20.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation 'io.reactivex.rxjava2:rxjava:2.1.5'
    implementation('com.github.devv911:android-job:1.4.5') {
        exclude group: 'com.google.android', module: 'android'
    }
    implementation 'androidx.work:work-runtime:2.7.1'
    implementation 'com.github.lecho:hellocharts-android:1.5.8@aar'
    implementation 'id.zelory:compressor:2.1.1'
    implementation('com.google.android.material:material:1.0.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
    }

    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:28.4.0')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.24'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'org.jeasy:easy-rules-core:3.2.0'
    implementation 'org.jeasy:easy-rules-mvel:3.2.0'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.24'
    implementation group: 'io.fabric.sdk.android', name: 'fabric', version: '1.4.8'

    implementation "androidx.multidex:multidex:2.0.1"
    testImplementation "androidx.work:work-testing:2.7.1"
    testImplementation 'androidx.test:runner:1.3.0'
    testImplementation 'androidx.test:core:1.3.0'


    def robolectricVersion = '4.1'
    testImplementation("org.robolectric:robolectric:$robolectricVersion") {
        exclude group: 'com.google.auto.service', module: 'auto-service'
        exclude group: 'com.android.support'
    }
    testImplementation "org.robolectric:shadows-multidex:$robolectricVersion"
    testImplementation "org.robolectric:shadows-support-v4:3.3.2"

    testImplementation 'com.ibm.fhir:fhir-model:4.7.0'
    testImplementation 'com.ibm.fhir:fhir-path:4.7.0'

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.+') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'junit', module: 'junit'
    }
    // PowerMock
    def powerMockVersion = '2.0.7'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-javaagent:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'junit', module: 'junit'
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
    sourceDirs = ["$project.projectDir/src/main/java"]
}